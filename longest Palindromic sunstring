// expand from middle and

// C++ program to find the longest
// palindromic substring.
#include <bits/stdc++.h>
using namespace std;

// Function to find the longest palindrome substring
string longestPalindrome(string &s) {
    int n = s.size();
    vector<vector<bool>> dp(n, vector<bool>(n, false));
    
    int start = 0, maxLen = 1;

    // All substrings of length 1 are palindromes
    for (int i = 0; i < n; ++i)
        dp[i][i] = true;

    // Check for sub-string of length 2
    for (int i = 0; i < n - 1; ++i) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = true;
            if (maxLen<2) {
                start = i;
                maxLen = 2;
            }
        }
    }

    // Check for lengths greater than 2
    for (int k = 3; k <= n; ++k) {
        for (int i = 0; i < n - k + 1; ++i) {
            int j = i + k - 1;

            if (dp[i + 1][j - 1] && s[i] == s[j]) {
                dp[i][j] = true;

                if (k > maxLen) {
                    start = i;
                    maxLen = k;
                }
            }
        }
    }

    return s.substr(start, maxLen);
}

int main() {
    string s = "aaaabbaa";
    cout << longestPalindrome(s) << endl;
    return 0;
}



// method3 



class Solution {
  public:
    
    
    
    bool check(int i,int j,string &s,vector<vector<int>> &dp){
        
        if(i>=j){
            return true;
        }
        
        
        if(dp[i][j]!=-1) return dp[i][j];
        
        
        if(s[i]==s[j]){
            dp[i][j]=check(i+1,j-1,s,dp);
        }
        
        else dp[i][j]=false;
        
        
        
        return dp[i][j];
    }
    
  
    string longestPalindrome(string &s) {
        // code here
        
        int n =s.length();
        vector<vector<int>> dp(n,vector<int> (n,-1));
        int maxLen=1;
        int start=0;
        for(int  i=0;i<n;i++){
            for(int j=i;j<n;j++){
                
                if(check(i,j,s,dp)){
                    if(maxLen<j-i+1) start=i;
                    maxLen=max(maxLen,j-i+1);
                }
            }
        }
        
        
        return s.substr(start,maxLen);
        
    }
};
