class Solution {
  public:
    
    int f(int ind,int last_ind, vector<int>& arr,
    vector<vector<int>> &dp,vector<vector<int>> &choice){
        
        if(ind==arr.size()){
            return 0;
        }
        
        if(dp[ind][last_ind+1]!=-1 )return dp[ind][last_ind+1];
        
        int  take =0,nontake=0;
        
        if(last_ind==-1 || arr[last_ind]<arr[ind] ){
            take=1+f(ind+1,ind,arr,dp,choice);
        }
        
        nontake=f(ind+1,last_ind,arr,dp,choice);
        
        
        if(take>nontake){
            choice[ind][last_ind+1]=1;
        }else{
             choice[ind][last_ind+1]=0;
        }
        
        return dp[ind][last_ind+1]=max(take,nontake);
        
        
    }
    
    // 0 to n-1
    
    int lis(vector<int>& arr) {
        // code here
        int n =arr.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        vector<vector<int>> choice(n+1,vector<int>(n+1,0));
        // return f(0,-1,arr,dp);
        
         for(int ind=n-1;ind>=0;ind--){
             for(int last_ind=ind-1;last_ind>=-1;last_ind-- ){
                 
                 int  take =0,nontake=0;
        
           if(last_ind==-1 || arr[last_ind]<arr[ind] ){
                 take=1+dp[ind+1][ind+1];
             }
        
            nontake=dp[ind+1][last_ind+1];
            
             if(take>nontake){
            choice[ind][last_ind+1]=1;
             }else{
             choice[ind][last_ind+1]=0;
             }
        
            dp[ind][last_ind+1]=max(take,nontake);
             }
         }
         
         
         int ind=0,last_ind=-1;
         while(ind<n)
         {
             if(choice[ind][last_ind+1]==1){
                 cout<<arr[ind]<<" ";
                 last_ind=ind;
                 
             }
             
             ind++;
         }
         
         cout<<endl;
        
         return dp[0][0];
    //   return 0;
    }
};
